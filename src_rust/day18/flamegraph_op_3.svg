<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180"><g><title>__libc_realloc (61 samples, 0.64%)</title><rect x="0.2714%" y="357" width="0.6368%" height="15" fill="rgb(227,0,7)"/><text x="0.5214%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (67 samples, 0.70%)</title><rect x="0.2192%" y="373" width="0.6994%" height="15" fill="rgb(217,0,24)"/><text x="0.4692%" y="383.50"></text></g><g><title>cfree (127 samples, 1.33%)</title><rect x="0.9187%" y="373" width="1.3258%" height="15" fill="rgb(221,193,54)"/><text x="1.1687%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.17%)</title><rect x="2.2445%" y="373" width="0.1670%" height="15" fill="rgb(248,212,6)"/><text x="2.4945%" y="383.50"></text></g><g><title>cfree (16 samples, 0.17%)</title><rect x="2.2445%" y="357" width="0.1670%" height="15" fill="rgb(208,68,35)"/><text x="2.4945%" y="367.50"></text></g><g><title>cfree (66 samples, 0.69%)</title><rect x="2.6412%" y="357" width="0.6890%" height="15" fill="rgb(232,128,0)"/><text x="2.8912%" y="367.50"></text></g><g><title>alloc::vec::from_elem (14 samples, 0.15%)</title><rect x="3.3511%" y="341" width="0.1462%" height="15" fill="rgb(207,160,47)"/><text x="3.6011%" y="351.50"></text></g><g><title>__libc_calloc (13 samples, 0.14%)</title><rect x="3.3615%" y="325" width="0.1357%" height="15" fill="rgb(228,23,34)"/><text x="3.6115%" y="335.50"></text></g><g><title>day18::types::Node::find_accessible_keys (229 samples, 2.39%)</title><rect x="2.4846%" y="373" width="2.3906%" height="15" fill="rgb(218,30,26)"/><text x="2.7346%" y="383.50">da..</text></g><g><title>day18::util::get_walkable_spaces (148 samples, 1.55%)</title><rect x="3.3302%" y="357" width="1.5450%" height="15" fill="rgb(220,122,19)"/><text x="3.5802%" y="367.50"></text></g><g><title>day18::util::find_walkable_spaces (131 samples, 1.37%)</title><rect x="3.5077%" y="341" width="1.3676%" height="15" fill="rgb(250,228,42)"/><text x="3.7577%" y="351.50"></text></g><g><title>day18::util::find_walkable_spaces (118 samples, 1.23%)</title><rect x="3.6434%" y="325" width="1.2319%" height="15" fill="rgb(240,193,28)"/><text x="3.8934%" y="335.50"></text></g><g><title>day18::util::find_walkable_spaces (116 samples, 1.21%)</title><rect x="3.6643%" y="309" width="1.2110%" height="15" fill="rgb(216,20,37)"/><text x="3.9143%" y="319.50"></text></g><g><title>day18::util::find_walkable_spaces (113 samples, 1.18%)</title><rect x="3.6956%" y="293" width="1.1797%" height="15" fill="rgb(206,188,39)"/><text x="3.9456%" y="303.50"></text></g><g><title>day18::util::find_walkable_spaces (109 samples, 1.14%)</title><rect x="3.7373%" y="277" width="1.1379%" height="15" fill="rgb(217,207,13)"/><text x="3.9873%" y="287.50"></text></g><g><title>day18::util::find_walkable_spaces (98 samples, 1.02%)</title><rect x="3.8522%" y="261" width="1.0231%" height="15" fill="rgb(231,73,38)"/><text x="4.1022%" y="271.50"></text></g><g><title>day18::util::find_walkable_spaces (89 samples, 0.93%)</title><rect x="3.9461%" y="245" width="0.9291%" height="15" fill="rgb(225,20,46)"/><text x="4.1961%" y="255.50"></text></g><g><title>day18::util::find_walkable_spaces (82 samples, 0.86%)</title><rect x="4.0192%" y="229" width="0.8560%" height="15" fill="rgb(210,31,41)"/><text x="4.2692%" y="239.50"></text></g><g><title>day18::util::find_walkable_spaces (68 samples, 0.71%)</title><rect x="4.1654%" y="213" width="0.7099%" height="15" fill="rgb(221,200,47)"/><text x="4.4154%" y="223.50"></text></g><g><title>day18::util::find_walkable_spaces (62 samples, 0.65%)</title><rect x="4.2280%" y="197" width="0.6472%" height="15" fill="rgb(226,26,5)"/><text x="4.4780%" y="207.50"></text></g><g><title>day18::util::find_walkable_spaces (57 samples, 0.60%)</title><rect x="4.2802%" y="181" width="0.5951%" height="15" fill="rgb(249,33,26)"/><text x="4.5302%" y="191.50"></text></g><g><title>day18::util::find_walkable_spaces (49 samples, 0.51%)</title><rect x="4.3637%" y="165" width="0.5115%" height="15" fill="rgb(235,183,28)"/><text x="4.6137%" y="175.50"></text></g><g><title>day18::util::find_walkable_spaces (46 samples, 0.48%)</title><rect x="4.3950%" y="149" width="0.4802%" height="15" fill="rgb(221,5,38)"/><text x="4.6450%" y="159.50"></text></g><g><title>day18::util::find_walkable_spaces (39 samples, 0.41%)</title><rect x="4.4681%" y="133" width="0.4071%" height="15" fill="rgb(247,18,42)"/><text x="4.7181%" y="143.50"></text></g><g><title>day18::util::find_walkable_spaces (36 samples, 0.38%)</title><rect x="4.4994%" y="117" width="0.3758%" height="15" fill="rgb(241,131,45)"/><text x="4.7494%" y="127.50"></text></g><g><title>day18::util::find_walkable_spaces (32 samples, 0.33%)</title><rect x="4.5412%" y="101" width="0.3341%" height="15" fill="rgb(249,31,29)"/><text x="4.7912%" y="111.50"></text></g><g><title>day18::util::find_walkable_spaces (20 samples, 0.21%)</title><rect x="4.6665%" y="85" width="0.2088%" height="15" fill="rgb(225,111,53)"/><text x="4.9165%" y="95.50"></text></g><g><title>day18::util::find_walkable_spaces (11 samples, 0.11%)</title><rect x="4.7604%" y="69" width="0.1148%" height="15" fill="rgb(238,160,17)"/><text x="5.0104%" y="79.50"></text></g><g><title>__libc_realloc (275 samples, 2.87%)</title><rect x="6.3055%" y="341" width="2.8709%" height="15" fill="rgb(214,148,48)"/><text x="6.5555%" y="351.50">__..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (309 samples, 3.23%)</title><rect x="5.9923%" y="357" width="3.2258%" height="15" fill="rgb(232,36,49)"/><text x="6.2423%" y="367.50">all..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (37 samples, 0.39%)</title><rect x="9.7714%" y="341" width="0.3863%" height="15" fill="rgb(209,103,24)"/><text x="10.0214%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A, B, C)&gt;::hash (91 samples, 0.95%)</title><rect x="9.2181%" y="357" width="0.9500%" height="15" fill="rgb(229,88,8)"/><text x="9.4681%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.14%)</title><rect x="11.2225%" y="325" width="0.1357%" height="15" fill="rgb(213,181,19)"/><text x="11.4725%" y="335.50"></text></g><g><title>__libc_malloc (15 samples, 0.16%)</title><rect x="11.6922%" y="293" width="0.1566%" height="15" fill="rgb(254,191,54)"/><text x="11.9422%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (122 samples, 1.27%)</title><rect x="10.8988%" y="341" width="1.2736%" height="15" fill="rgb(241,83,37)"/><text x="11.1488%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (78 samples, 0.81%)</title><rect x="11.3582%" y="325" width="0.8143%" height="15" fill="rgb(233,36,39)"/><text x="11.6082%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (69 samples, 0.72%)</title><rect x="11.4521%" y="309" width="0.7203%" height="15" fill="rgb(226,3,54)"/><text x="11.7021%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 0.32%)</title><rect x="11.8488%" y="293" width="0.3236%" height="15" fill="rgb(245,192,40)"/><text x="12.0988%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.14%)</title><rect x="12.0367%" y="277" width="0.1357%" height="15" fill="rgb(238,167,29)"/><text x="12.2867%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.22%)</title><rect x="12.5170%" y="325" width="0.2192%" height="15" fill="rgb(232,182,51)"/><text x="12.7670%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (55 samples, 0.57%)</title><rect x="12.1725%" y="341" width="0.5742%" height="15" fill="rgb(231,60,39)"/><text x="12.4225%" y="351.50"></text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::change_priority (21 samples, 0.22%)</title><rect x="12.7466%" y="341" width="0.2192%" height="15" fill="rgb(208,69,12)"/><text x="12.9966%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_full_mut (19 samples, 0.20%)</title><rect x="12.7675%" y="325" width="0.1984%" height="15" fill="rgb(235,93,37)"/><text x="13.0175%" y="335.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (23 samples, 0.24%)</title><rect x="13.1329%" y="325" width="0.2401%" height="15" fill="rgb(213,116,39)"/><text x="13.3829%" y="335.50"></text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::push (34 samples, 0.35%)</title><rect x="13.0389%" y="341" width="0.3549%" height="15" fill="rgb(222,207,29)"/><text x="13.2889%" y="351.50"></text></g><g><title>day18::util::astar_pathfind (329 samples, 3.43%)</title><rect x="10.1681%" y="357" width="3.4346%" height="15" fill="rgb(206,96,30)"/><text x="10.4181%" y="367.50">day..</text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::swap_remove (20 samples, 0.21%)</title><rect x="13.3939%" y="341" width="0.2088%" height="15" fill="rgb(218,138,4)"/><text x="13.6439%" y="351.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::swap_remove_index (18 samples, 0.19%)</title><rect x="13.4148%" y="325" width="0.1879%" height="15" fill="rgb(250,191,14)"/><text x="13.6648%" y="335.50"></text></g><g><title>day18::types::Node::got_key (838 samples, 8.75%)</title><rect x="4.8752%" y="373" width="8.7483%" height="15" fill="rgb(239,60,40)"/><text x="5.1252%" y="383.50">day18::types..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,456 samples, 15.20%)</title><rect x="38.7828%" y="341" width="15.1999%" height="15" fill="rgb(206,27,48)"/><text x="39.0328%" y="351.50">&lt;std::collections::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A, B, C)&gt;::hash (1,833 samples, 19.14%)</title><rect x="35.7344%" y="357" width="19.1356%" height="15" fill="rgb(225,35,8)"/><text x="35.9844%" y="367.50">core::hash::impls::&lt;impl core:..</text></g><g><title>alloc::alloc::box_free (85 samples, 0.89%)</title><rect x="53.9827%" y="341" width="0.8874%" height="15" fill="rgb(250,213,24)"/><text x="54.2327%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (32 samples, 0.33%)</title><rect x="55.2250%" y="341" width="0.3341%" height="15" fill="rgb(247,123,22)"/><text x="55.4750%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (21 samples, 0.22%)</title><rect x="55.3398%" y="325" width="0.2192%" height="15" fill="rgb(231,138,38)"/><text x="55.5898%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (19 samples, 0.20%)</title><rect x="55.3607%" y="309" width="0.1984%" height="15" fill="rgb(231,145,46)"/><text x="55.6107%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.22%)</title><rect x="55.5590%" y="341" width="0.2192%" height="15" fill="rgb(251,118,11)"/><text x="55.8090%" y="351.50"></text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::push (14 samples, 0.15%)</title><rect x="55.8305%" y="341" width="0.1462%" height="15" fill="rgb(217,147,25)"/><text x="56.0805%" y="351.50"></text></g><g><title>day18::util::closest_astar_greedy (4,060 samples, 42.38%)</title><rect x="13.6236%" y="373" width="42.3844%" height="15" fill="rgb(247,81,37)"/><text x="13.8736%" y="383.50">day18::util::closest_astar_greedy</text></g><g><title>day18::util::astar_pathfind (109 samples, 1.14%)</title><rect x="54.8700%" y="357" width="1.1379%" height="15" fill="rgb(209,12,38)"/><text x="55.1200%" y="367.50"></text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::heapify (79 samples, 0.82%)</title><rect x="56.0079%" y="373" width="0.8247%" height="15" fill="rgb(227,1,9)"/><text x="56.2579%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (93 samples, 0.97%)</title><rect x="57.6365%" y="325" width="0.9709%" height="15" fill="rgb(248,47,43)"/><text x="57.8865%" y="335.50"></text></g><g><title>&lt;day18::types::Node as core::hash::Hash&gt;::hash (113 samples, 1.18%)</title><rect x="57.4695%" y="341" width="1.1797%" height="15" fill="rgb(221,10,30)"/><text x="57.7195%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (198 samples, 2.07%)</title><rect x="57.4173%" y="357" width="2.0670%" height="15" fill="rgb(210,229,1)"/><text x="57.6673%" y="367.50">i..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (80 samples, 0.84%)</title><rect x="58.6491%" y="341" width="0.8352%" height="15" fill="rgb(222,148,37)"/><text x="58.8991%" y="351.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (21 samples, 0.22%)</title><rect x="59.4843%" y="357" width="0.2192%" height="15" fill="rgb(234,67,33)"/><text x="59.7343%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T&gt;::insert (12 samples, 0.13%)</title><rect x="59.5782%" y="341" width="0.1253%" height="15" fill="rgb(247,98,35)"/><text x="59.8282%" y="351.50"></text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::push (291 samples, 3.04%)</title><rect x="56.8327%" y="373" width="3.0379%" height="15" fill="rgb(247,138,52)"/><text x="57.0827%" y="383.50">pri..</text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::heapify (16 samples, 0.17%)</title><rect x="59.7035%" y="357" width="0.1670%" height="15" fill="rgb(213,79,30)"/><text x="59.9535%" y="367.50"></text></g><g><title>_start (5,741 samples, 59.93%)</title><rect x="0.0835%" y="501" width="59.9332%" height="15" fill="rgb(246,177,23)"/><text x="0.3335%" y="511.50">_start</text></g><g><title>__libc_start_main (5,741 samples, 59.93%)</title><rect x="0.0835%" y="485" width="59.9332%" height="15" fill="rgb(230,62,27)"/><text x="0.3335%" y="495.50">__libc_start_main</text></g><g><title>main (5,741 samples, 59.93%)</title><rect x="0.0835%" y="469" width="59.9332%" height="15" fill="rgb(216,154,8)"/><text x="0.3335%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking::try (5,741 samples, 59.93%)</title><rect x="0.0835%" y="453" width="59.9332%" height="15" fill="rgb(244,35,45)"/><text x="0.3335%" y="463.50">std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking::try</text></g><g><title>__rust_maybe_catch_panic (5,741 samples, 59.93%)</title><rect x="0.0835%" y="437" width="59.9332%" height="15" fill="rgb(251,115,12)"/><text x="0.3335%" y="447.50">__rust_maybe_catch_panic</text></g><g><title>std::panicking::try::do_call/std::rt::lang_start_internal::{{closure}} (5,741 samples, 59.93%)</title><rect x="0.0835%" y="421" width="59.9332%" height="15" fill="rgb(240,54,50)"/><text x="0.3335%" y="431.50">std::panicking::try::do_call/std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::rt::lang_start::{{closure}} (5,741 samples, 59.93%)</title><rect x="0.0835%" y="405" width="59.9332%" height="15" fill="rgb(233,84,52)"/><text x="0.3335%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>day18::main (5,741 samples, 59.93%)</title><rect x="0.0835%" y="389" width="59.9332%" height="15" fill="rgb(207,117,47)"/><text x="0.3335%" y="399.50">day18::main</text></g><g><title>priority_queue::pqueue::PriorityQueue&lt;I,P,H&gt;::swap_remove (14 samples, 0.15%)</title><rect x="59.8706%" y="373" width="0.1462%" height="15" fill="rgb(249,43,39)"/><text x="60.1206%" y="383.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::swap_remove_index (14 samples, 0.15%)</title><rect x="59.8706%" y="357" width="0.1462%" height="15" fill="rgb(209,38,44)"/><text x="60.1206%" y="367.50"></text></g><g><title>__libc_malloc (889 samples, 9.28%)</title><rect x="60.1211%" y="53" width="9.2807%" height="15" fill="rgb(236,212,23)"/><text x="60.3711%" y="63.50">__libc_malloc</text></g><g><title>__libc_malloc (366 samples, 3.82%)</title><rect x="70.8111%" y="37" width="3.8209%" height="15" fill="rgb(242,79,21)"/><text x="71.0611%" y="47.50">__li..</text></g><g><title>__rdl_alloc/std::sys::unix::alloc::&lt;impl core::alloc::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.19%)</title><rect x="74.6320%" y="37" width="0.1879%" height="15" fill="rgb(211,96,35)"/><text x="74.8820%" y="47.50"></text></g><g><title>cfree (473 samples, 4.94%)</title><rect x="74.8199%" y="37" width="4.9379%" height="15" fill="rgb(253,215,40)"/><text x="75.0699%" y="47.50">cfree</text></g><g><title>day18::util::astar_pathfind (33 samples, 0.34%)</title><rect x="79.7578%" y="37" width="0.3445%" height="15" fill="rgb(211,81,21)"/><text x="80.0078%" y="47.50"></text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="501" width="39.4300%" height="15" fill="rgb(208,190,38)"/><text x="60.3711%" y="511.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="485" width="39.4300%" height="15" fill="rgb(235,213,38)"/><text x="60.3711%" y="495.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="469" width="39.4300%" height="15" fill="rgb(237,122,38)"/><text x="60.3711%" y="479.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="453" width="39.4300%" height="15" fill="rgb(244,218,35)"/><text x="60.3711%" y="463.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="437" width="39.4300%" height="15" fill="rgb(240,68,47)"/><text x="60.3711%" y="447.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="421" width="39.4300%" height="15" fill="rgb(210,16,53)"/><text x="60.3711%" y="431.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="405" width="39.4300%" height="15" fill="rgb(235,124,12)"/><text x="60.3711%" y="415.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="389" width="39.4300%" height="15" fill="rgb(224,169,11)"/><text x="60.3711%" y="399.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="373" width="39.4300%" height="15" fill="rgb(250,166,2)"/><text x="60.3711%" y="383.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="357" width="39.4300%" height="15" fill="rgb(242,216,29)"/><text x="60.3711%" y="367.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="341" width="39.4300%" height="15" fill="rgb(230,116,27)"/><text x="60.3711%" y="351.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="325" width="39.4300%" height="15" fill="rgb(228,99,48)"/><text x="60.3711%" y="335.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="309" width="39.4300%" height="15" fill="rgb(253,11,6)"/><text x="60.3711%" y="319.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="293" width="39.4300%" height="15" fill="rgb(247,143,39)"/><text x="60.3711%" y="303.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="277" width="39.4300%" height="15" fill="rgb(236,97,10)"/><text x="60.3711%" y="287.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="261" width="39.4300%" height="15" fill="rgb(233,208,19)"/><text x="60.3711%" y="271.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="245" width="39.4300%" height="15" fill="rgb(216,164,2)"/><text x="60.3711%" y="255.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="229" width="39.4300%" height="15" fill="rgb(220,129,5)"/><text x="60.3711%" y="239.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="213" width="39.4300%" height="15" fill="rgb(242,17,10)"/><text x="60.3711%" y="223.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="197" width="39.4300%" height="15" fill="rgb(242,107,0)"/><text x="60.3711%" y="207.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="181" width="39.4300%" height="15" fill="rgb(251,28,31)"/><text x="60.3711%" y="191.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="165" width="39.4300%" height="15" fill="rgb(233,223,10)"/><text x="60.3711%" y="175.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="149" width="39.4300%" height="15" fill="rgb(215,21,27)"/><text x="60.3711%" y="159.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="133" width="39.4300%" height="15" fill="rgb(232,23,21)"/><text x="60.3711%" y="143.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="117" width="39.4300%" height="15" fill="rgb(244,5,23)"/><text x="60.3711%" y="127.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="101" width="39.4300%" height="15" fill="rgb(226,81,46)"/><text x="60.3711%" y="111.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="85" width="39.4300%" height="15" fill="rgb(247,70,30)"/><text x="60.3711%" y="95.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (3,777 samples, 39.43%)</title><rect x="60.1211%" y="69" width="39.4300%" height="15" fill="rgb(212,68,19)"/><text x="60.3711%" y="79.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (2,888 samples, 30.15%)</title><rect x="69.4018%" y="53" width="30.1493%" height="15" fill="rgb(240,187,13)"/><text x="69.6518%" y="63.50">day18::util::find_walkable_spaces</text></g><g><title>day18::util::find_walkable_spaces (1,863 samples, 19.45%)</title><rect x="80.1023%" y="37" width="19.4488%" height="15" fill="rgb(223,113,26)"/><text x="80.3523%" y="47.50">day18::util::find_walkable_spa..</text></g><g><title>main (10 samples, 0.10%)</title><rect x="99.6451%" y="501" width="0.1044%" height="15" fill="rgb(206,192,2)"/><text x="99.8951%" y="511.50"></text></g><g><title>std::rt::lang_start_internal/std::panic::catch_unwind/std::panicking::try (10 samples, 0.10%)</title><rect x="99.6451%" y="485" width="0.1044%" height="15" fill="rgb(241,108,4)"/><text x="99.8951%" y="495.50"></text></g><g><title>__rust_maybe_catch_panic (10 samples, 0.10%)</title><rect x="99.6451%" y="469" width="0.1044%" height="15" fill="rgb(247,173,49)"/><text x="99.8951%" y="479.50"></text></g><g><title>std::panicking::try::do_call/std::rt::lang_start_internal::{{closure}} (10 samples, 0.10%)</title><rect x="99.6451%" y="453" width="0.1044%" height="15" fill="rgb(224,114,35)"/><text x="99.8951%" y="463.50"></text></g><g><title>std::rt::lang_start::{{closure}} (10 samples, 0.10%)</title><rect x="99.6451%" y="437" width="0.1044%" height="15" fill="rgb(245,159,27)"/><text x="99.8951%" y="447.50"></text></g><g><title>day18::main (10 samples, 0.10%)</title><rect x="99.6451%" y="421" width="0.1044%" height="15" fill="rgb(245,172,44)"/><text x="99.8951%" y="431.50"></text></g><g><title>day18::types::Node::find_accessible_keys (10 samples, 0.10%)</title><rect x="99.6451%" y="405" width="0.1044%" height="15" fill="rgb(236,23,11)"/><text x="99.8951%" y="415.50"></text></g><g><title>day18::util::get_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="389" width="0.1044%" height="15" fill="rgb(205,117,38)"/><text x="99.8951%" y="399.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="373" width="0.1044%" height="15" fill="rgb(237,72,25)"/><text x="99.8951%" y="383.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="357" width="0.1044%" height="15" fill="rgb(244,70,9)"/><text x="99.8951%" y="367.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="341" width="0.1044%" height="15" fill="rgb(217,125,39)"/><text x="99.8951%" y="351.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="325" width="0.1044%" height="15" fill="rgb(235,36,10)"/><text x="99.8951%" y="335.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="309" width="0.1044%" height="15" fill="rgb(251,123,47)"/><text x="99.8951%" y="319.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="293" width="0.1044%" height="15" fill="rgb(221,13,13)"/><text x="99.8951%" y="303.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="277" width="0.1044%" height="15" fill="rgb(238,131,9)"/><text x="99.8951%" y="287.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="261" width="0.1044%" height="15" fill="rgb(211,50,8)"/><text x="99.8951%" y="271.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="245" width="0.1044%" height="15" fill="rgb(245,182,24)"/><text x="99.8951%" y="255.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="229" width="0.1044%" height="15" fill="rgb(242,14,37)"/><text x="99.8951%" y="239.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="213" width="0.1044%" height="15" fill="rgb(246,228,12)"/><text x="99.8951%" y="223.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="197" width="0.1044%" height="15" fill="rgb(213,55,15)"/><text x="99.8951%" y="207.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="181" width="0.1044%" height="15" fill="rgb(209,9,3)"/><text x="99.8951%" y="191.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="165" width="0.1044%" height="15" fill="rgb(230,59,30)"/><text x="99.8951%" y="175.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="149" width="0.1044%" height="15" fill="rgb(209,121,21)"/><text x="99.8951%" y="159.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="133" width="0.1044%" height="15" fill="rgb(220,109,13)"/><text x="99.8951%" y="143.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="117" width="0.1044%" height="15" fill="rgb(232,18,1)"/><text x="99.8951%" y="127.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="101" width="0.1044%" height="15" fill="rgb(215,41,42)"/><text x="99.8951%" y="111.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="85" width="0.1044%" height="15" fill="rgb(224,123,36)"/><text x="99.8951%" y="95.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="69" width="0.1044%" height="15" fill="rgb(240,125,3)"/><text x="99.8951%" y="79.50"></text></g><g><title>day18::util::find_walkable_spaces (10 samples, 0.10%)</title><rect x="99.6451%" y="53" width="0.1044%" height="15" fill="rgb(205,98,50)"/><text x="99.8951%" y="63.50"></text></g><g><title>std::rt::lang_start::{{closure}} (13 samples, 0.14%)</title><rect x="99.8225%" y="501" width="0.1357%" height="15" fill="rgb(205,185,37)"/><text x="100.0725%" y="511.50"></text></g><g><title>day18::main (13 samples, 0.14%)</title><rect x="99.8225%" y="485" width="0.1357%" height="15" fill="rgb(238,207,15)"/><text x="100.0725%" y="495.50"></text></g><g><title>day18::types::Node::find_accessible_keys (13 samples, 0.14%)</title><rect x="99.8225%" y="469" width="0.1357%" height="15" fill="rgb(213,199,42)"/><text x="100.0725%" y="479.50"></text></g><g><title>day18::util::get_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="453" width="0.1357%" height="15" fill="rgb(235,201,11)"/><text x="100.0725%" y="463.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="437" width="0.1357%" height="15" fill="rgb(207,46,11)"/><text x="100.0725%" y="447.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="421" width="0.1357%" height="15" fill="rgb(241,35,35)"/><text x="100.0725%" y="431.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="405" width="0.1357%" height="15" fill="rgb(243,32,47)"/><text x="100.0725%" y="415.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="389" width="0.1357%" height="15" fill="rgb(247,202,23)"/><text x="100.0725%" y="399.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="373" width="0.1357%" height="15" fill="rgb(219,102,11)"/><text x="100.0725%" y="383.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="357" width="0.1357%" height="15" fill="rgb(243,110,44)"/><text x="100.0725%" y="367.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="341" width="0.1357%" height="15" fill="rgb(222,74,54)"/><text x="100.0725%" y="351.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="325" width="0.1357%" height="15" fill="rgb(216,99,12)"/><text x="100.0725%" y="335.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="309" width="0.1357%" height="15" fill="rgb(226,22,26)"/><text x="100.0725%" y="319.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="293" width="0.1357%" height="15" fill="rgb(217,163,10)"/><text x="100.0725%" y="303.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="277" width="0.1357%" height="15" fill="rgb(213,25,53)"/><text x="100.0725%" y="287.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="261" width="0.1357%" height="15" fill="rgb(252,105,26)"/><text x="100.0725%" y="271.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="245" width="0.1357%" height="15" fill="rgb(220,39,43)"/><text x="100.0725%" y="255.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="229" width="0.1357%" height="15" fill="rgb(229,68,48)"/><text x="100.0725%" y="239.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="213" width="0.1357%" height="15" fill="rgb(252,8,32)"/><text x="100.0725%" y="223.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="197" width="0.1357%" height="15" fill="rgb(223,20,43)"/><text x="100.0725%" y="207.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="181" width="0.1357%" height="15" fill="rgb(229,81,49)"/><text x="100.0725%" y="191.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="165" width="0.1357%" height="15" fill="rgb(236,28,36)"/><text x="100.0725%" y="175.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="149" width="0.1357%" height="15" fill="rgb(249,185,26)"/><text x="100.0725%" y="159.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="133" width="0.1357%" height="15" fill="rgb(249,174,33)"/><text x="100.0725%" y="143.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="117" width="0.1357%" height="15" fill="rgb(233,201,37)"/><text x="100.0725%" y="127.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="101" width="0.1357%" height="15" fill="rgb(221,78,26)"/><text x="100.0725%" y="111.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="85" width="0.1357%" height="15" fill="rgb(250,127,30)"/><text x="100.0725%" y="95.50"></text></g><g><title>day18::util::find_walkable_spaces (13 samples, 0.14%)</title><rect x="99.8225%" y="69" width="0.1357%" height="15" fill="rgb(230,49,44)"/><text x="100.0725%" y="79.50"></text></g><g><title>all (9,579 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="543.50"></text></g><g><title>day18 (9,579 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="527.50">day18</text></g></svg></svg>